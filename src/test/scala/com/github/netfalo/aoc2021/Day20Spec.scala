package com.github.netfalo.aoc2021

import com.github.netfalo.aoc2021.Day20.{Image, parseInput, solveFirstPart, solveSecondPart}
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

class Day20Spec extends AnyFlatSpec with Matchers {
  private val example =
    """
      |
      |
      |#..#.
      |#....
      |##..#
      |..#..
      |..###""".replace("\r", "").stripMargin

  private lazy val exercise = Resource("Day20.txt").content

  "Day20" should "parse" in {
    val expected = (Vector('0', '0', '1', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '0', '1', '1', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1'),
      Image(Vector(
        Vector('1', '0', '0', '1', '0'),
        Vector('1', '0', '0', '0', '0'),
        Vector('1', '1', '0', '0', '1'),
        Vector('0', '0', '1', '0', '0'),
        Vector('0', '0', '1', '1', '1')), 5, 5, '0'))

    Day20.parseInput(example) shouldEqual expected
  }

  it should "enhance" in {
    val (iea, image) = Day20.parseInput(example)

    Vector(
      Vector('0', '0', '0', '0', '0', '0', '0'),
      Vector('0', '1', '0', '0', '1', '0', '0'),
      Vector('0', '1', '0', '0', '0', '0', '0'),
      Vector('0', '1', '1', '0', '0', '1', '0'),
      Vector('0', '0', '0', '1', '0', '0', '0'),
      Vector('0', '0', '0', '1', '1', '1', '0'),
      Vector('0', '0', '0', '0', '0', '0', '0'))

    val expected = Image(
      Vector(
        Vector('0', '1', '1', '0', '1', '1', '0'),
        Vector('1', '0', '0', '1', '0', '1', '0'),
        Vector('1', '1', '0', '1', '0', '0', '1'),
        Vector('1', '1', '1', '1', '0', '0', '1'),
        Vector('0', '1', '0', '0', '1', '1', '0'),
        Vector('0', '0', '1', '1', '0', '0', '1'),
        Vector('0', '0', '0', '1', '0', '1', '0')),
      7, 7, '0'
    )

    image.enhance(iea) shouldEqual expected
  }

  it should "enhance twice" in {
    solveFirstPart(example) shouldEqual 35
    solveFirstPart(exercise) shouldEqual 5395
  }

  it should "enhance 50 times" in {
    solveSecondPart(example) shouldEqual 3351
    solveSecondPart(exercise) shouldEqual 17584
  }
}
